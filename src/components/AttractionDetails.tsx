import PropTypes from "prop-types";
import "tailwindcss";
import { useState, useEffect } from "react";
import { GoogleGenerativeAI } from "@google/generative-ai";

function AttractionDetails({ attractions, index, mobile }) {
  const attraction = attractions[index];
  //@ts-ignore
  const apiKey = import.meta.env.VITE_GOOGLE_KEY as string;
  const genAI = new GoogleGenerativeAI(apiKey);
  const [description, setDescription] = useState(" ");

  const getAIResponse = async () => {
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
    try {
      const result = await model.generateContent(
        `Describe the tourist spot "${attraction.name}" located at ${attraction.address} in exactly 3 factual sentences for tourists. Do not include address in the text.`,
      );

      if (!result.response) {
        console.error("Failed to fetch", result.response);
        return null;
      }
      setDescription(result.response.text());
    } catch (err) {
      console.error("Qeury error:", err);
    }
  };

  useEffect(() => {
    getAIResponse();
    setDescription(" ");
  }, [attraction]);
  return (
    <div>
      {mobile && (
        <div className="bg-neutral-100 shadow-lg bounded-xl h-300 col-span-2 bg-clip-border p-10 over">
          <div className="font-sans font-bold">{attraction.name} </div>
          <div className="font-normal font-sans ">
            {attraction.amenity}
            <div className="text-sm text-neutral-500 font-sans">
              {attraction.address}
            </div>
          </div>
          {attraction.url != null && (
            <a className="font-sans underline" href={attraction.url}>
              Check out the website here!
            </a>
          )}
          <br />
          <br />
          {description == " " && (
            <div className="font-sans font-medium text-center text-(--color-light-pink)">
              {" "}
              <div className="loader" /> <br />
              Description of a selected place is generated by AI
            </div>
          )}
          {description !== " " && <div>{description}</div>}
        </div>
      )}
      {!mobile && (
        <div className="bg-neutral-100 shadow-lg bounded-xl h-100 col-span-2 bg-clip-border p-10 over">
          <div className="font-sans font-bold">{attraction.name} </div>
          <div className="font-normal font-sans ">
            {attraction.amenity}
            <div className="text-sm text-neutral-500 font-sans">
              {attraction.address}
            </div>
          </div>
          {attraction.url != null && (
            <a className="font-sans underline" href={attraction.url}>
              Check out the website here!
            </a>
          )}
          <br />
          <br />
          {description == " " && (
            <div className="font-sans font-medium text-center text-(--color-light-pink)">
              {" "}
              <div className="loader" /> <br />
              Description of a selected place is generated by AI
            </div>
          )}
          {description !== " " && <div>{description}</div>}
        </div>
      )}
    </div>
  );
}

AttractionDetails.propTypes = {
  attractions: PropTypes.arrayOf(PropTypes.any),
  index: PropTypes.number,
  mobile: PropTypes.bool,
};

export default AttractionDetails;
